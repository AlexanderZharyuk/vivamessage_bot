import configparser
import logging
import os
import sqlite3

from textwrap import dedent
from enum import Enum, auto
from functools import partial

from telegram import (Update, ReplyKeyboardMarkup, KeyboardButton,
                      InlineKeyboardButton, InlineKeyboardMarkup,
                      ReplyKeyboardRemove)
from telegram.ext import (CallbackContext, CommandHandler, ConversationHandler,
                          MessageHandler, Filters, Updater,
                          CallbackQueryHandler)
from telegram.parsemode import ParseMode
from more_itertools import chunked
from dotenv import load_dotenv

from database_functions import (add_user_phone_number_to_db,
                                get_user_phone_from_db)
from bot_messages import (generate_menu_with_links_message,
                          write_appeal_to_admin)


class States(Enum):
    MAIN_MENU = auto()
    CHOOSE_THEME = auto()
    WRITE_TO_ADMIN = auto()
    APPROVE_APPEAL = auto()
    SEND_PHONE_TO_ADMIN = auto()
    DESCRIPTION = auto()
    USER_CHOICE = auto()
    AUTHORIZE_USER = auto()


logger = logging.getLogger(__name__)


def start(update: Update, context: CallbackContext) -> States:
    """
    –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª–∏–±–æ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç,
    –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
    """
    greeting_msg = dedent("""\
    –ü—Ä–∏–≤–µ—Ç!
    –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø—Ü–∏—é.
    """).replace("  ", "")

    keyboard_buttons = ["‚û°Ô∏è –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", "üìß –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º"]
    message_keyboard = list(chunked(keyboard_buttons, 1))
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
    )

    given_callback = update.callback_query
    if given_callback:
        given_callback.answer()
        given_callback.delete_message()
        given_callback.message.reply_text(
            text=greeting_msg,
            reply_markup=markup
        )
        return States.MAIN_MENU

    update.message.reply_text(
        text=greeting_msg,
        reply_markup=markup
    )
    return States.MAIN_MENU


def get_main_menu(
        update: Update,
        context: CallbackContext,
        api_url: str,
        api_guest_link_url: str) -> States:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    if not context.user_data.get("phone_number"):
        chat_id = update.message.chat_id
        phone_number = get_user_phone_from_db(chat_id)
        if not phone_number:
            keyboard_buttons = [
                KeyboardButton(
                    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                    request_contact=True)
            ]

            message_keyboard = list(chunked(keyboard_buttons, 2))
            markup = ReplyKeyboardMarkup(
                message_keyboard,
                resize_keyboard=True,
                one_time_keyboard=True
            )
            update.message.reply_text(
                "–î–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=markup
            )
            return States.USER_CHOICE

    generate_menu_with_links_message(
        update,
        context,
        api_url,
        api_guest_link_url
    )
    return States.AUTHORIZE_USER


def give_support_themes(
        update: Update,
        context: CallbackContext,
        support_themes: str) -> States:
    """
    –í—ã–¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è.
    –ë–µ—Ä–µ–º –∏—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
    """
    deleted_message = update.message.reply_text(
        "–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–µ–º...",
        reply_markup=ReplyKeyboardRemove()
    )
    context.bot.delete_message(
        chat_id=deleted_message.chat_id,
        message_id=deleted_message.message_id
    )
    message_keyboard = [
        InlineKeyboardButton(theme, callback_data=theme) for theme
        in support_themes.split(",")
    ]

    markup = InlineKeyboardMarkup(list(chunked(message_keyboard, 2)))
    support_message = dedent("""
    –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:
    """).replace("  ", "")
    message = update.message.reply_text(
        text=support_message,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    context.user_data["message_id"] = message.message_id
    return States.CHOOSE_THEME


def write_description(update: Update, context: CallbackContext) -> States:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ context.user_data –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É.
    """
    mail_theme = update.callback_query.data
    context.user_data["mail_theme"] = mail_theme

    message = dedent(f"""\
    –¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: <i>{mail_theme}</i>
    –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:
    """)
    context.bot.edit_message_text(
        text=message,
        chat_id=update.effective_chat.id,
        message_id=context.user_data.get("message_id"),
        parse_mode=ParseMode.HTML
    )
    return States.WRITE_TO_ADMIN


def approve_appeal(update: Update, context: CallbackContext) -> States:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context.user_data –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.
    –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–æ–¥–∏–ª –Ω–∏–≥–¥–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä - –∑–∞–±–∏–≤–∞–µ–º –≤ –ë–î.
    """

    problem_description = update.message.text
    context.user_data["problem_description"] = problem_description

    message = dedent(f"""\
    <b>–¢–µ–º–∞:</b> {context.user_data["mail_theme"]}
    <b>–¢–µ–∫—Å—Ç:</b> {context.user_data["problem_description"]}
    
    <i>–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º?</i>
    """)
    markup = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="approve"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="decline")
            ]
        ]
    )

    context.bot.send_message(
        text=message,
        reply_markup=markup,
        chat_id=update.effective_chat.id,
        parse_mode=ParseMode.HTML,
    )
    return States.APPROVE_APPEAL


def send_phone(update: Update,
               context: CallbackContext,
               telegram_admin_id: str) -> States:
    """
    –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î - –ø—Ä–æ—Å–∏–º –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞–º.
    –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
    """

    if not context.user_data.get("phone_number"):
        chat_id = update.callback_query.message.chat_id
        if not get_user_phone_from_db(chat_id):
            keyboard = [
                [
                    KeyboardButton(
                        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                        request_contact=True
                    )
                ]
            ]
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            context.bot.send_message(
                text="–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                chat_id=chat_id,
                reply_markup=markup
            )
            return States.SEND_PHONE_TO_ADMIN
    write_appeal_to_admin(update, context, telegram_admin_id)
    return States.MAIN_MENU


def write_to_admin(
        update: Update,
        context: CallbackContext,
        telegram_admin_id: str) -> States:
    """
    –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç.
    –û–±–Ω–æ–≤–ª—è–µ–º context.user_data, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î.
    """

    if update.message.contact:
        context.user_data["phone_number"] = update.message.contact.phone_number
        add_user_phone_number_to_db(update, context)

    write_appeal_to_admin(update, context, telegram_admin_id)
    return States.MAIN_MENU


def auth_user(
        update: Update,
        context: CallbackContext,
        api_url: str,
        api_guest_link_url: str) -> States:
    """
    –ü–æ–ª—É—á–∞–µ–º API-Endpoint –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å.
    """
    user_phone_number = update.message.contact.phone_number
    context.user_data["phone_number"] = user_phone_number
    add_user_phone_number_to_db(update, context)
    generate_menu_with_links_message(
        update,
        context,
        api_url,
        api_guest_link_url=api_guest_link_url
    )

    return States.AUTHORIZE_USER


def incorrect_command(update: Update, context: CallbackContext) -> States:
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É - —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º.
    """

    message = dedent("""\
    üëÄ –ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–Ω—è–ª.
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π. üëáüëáüëá
    
    <code>(–ï—Å–ª–∏ –Ω–µ –≤–∏–¥–Ω–æ –∫–æ–º–∞–Ω–¥, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø—Ä–∞–≤–µ–µ –ø–æ–ª—è –≤–≤–æ–¥–∞,\
     –∫–Ω–æ–ø–æ—á–∫–∞ c 4-–º—è –∫—Ä—É–≥–∞–º–∏ –≤–Ω—É—Ç—Ä–∏)</code>
    """).replace("  ", "")
    keyboard_buttons = ["‚û°Ô∏è –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", "üìß –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º"]
    message_keyboard = list(chunked(keyboard_buttons, 1))
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
    )

    update.message.reply_text(
        text=message,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    return States.MAIN_MENU


if __name__ == '__main__':
    load_dotenv()
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )
    config = configparser.ConfigParser()
    config.read("config.ini")
    telegram_admin_id = config["DEFAULT"]["TELEGRAM_ADMIN_ID"]
    support_themes = config["DEFAULT"]["SUPPORT_THEMES"]

    connection = sqlite3.connect("users.sqlite3")
    cursor = connection.cursor()
    sql_query = """
    CREATE TABLE IF NOT EXISTS Users (telegram_id INT, phone_number CHAR)
    """
    cursor.execute(sql_query)
    connection.commit()
    connection.close()

    telegram_bot_token = os.environ["TELEGRAM_BOT_TOKEN"]
    api_url = os.environ["API_URL"]
    api_guest_link_url = os.environ["API_GUEST_LINK_URL"]

    updater = Updater(telegram_bot_token, use_context=True)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            States.MAIN_MENU: [
                MessageHandler(
                    Filters.text("‚û°Ô∏è –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"),
                    partial(
                        get_main_menu,
                        api_url=api_url,
                        api_guest_link_url=api_guest_link_url
                    )
                ),
                MessageHandler(
                    Filters.text("üìß –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º"),
                    partial(
                        give_support_themes,
                        support_themes=support_themes
                    )
                ),
                MessageHandler(
                    Filters.text("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                ),
                MessageHandler(
                    Filters.text, incorrect_command
                )
            ],
            States.CHOOSE_THEME: [
                CallbackQueryHandler(
                    write_description
                )
            ],
            States.WRITE_TO_ADMIN: [
                MessageHandler(
                    Filters.text,
                    approve_appeal,
                )
            ],
            States.APPROVE_APPEAL: [
                CallbackQueryHandler(
                    partial(send_phone, telegram_admin_id=telegram_admin_id),
                    pattern="approve"
                ),
                CallbackQueryHandler(
                    start,
                    pattern="decline"
                )
            ],
            States.SEND_PHONE_TO_ADMIN: [
                MessageHandler(
                    Filters.contact,
                    partial(
                        write_to_admin,
                        telegram_admin_id=telegram_admin_id
                    )
                ),
                MessageHandler(
                    Filters.text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
                    partial(
                        write_to_admin,
                        telegram_admin_id=telegram_admin_id
                    )
                ),
            ],
            States.USER_CHOICE: [
                MessageHandler(
                    Filters.contact,
                    partial(
                        auth_user,
                        api_url=api_url,
                        api_guest_link_url=api_guest_link_url
                    )
                )
            ],
            States.AUTHORIZE_USER: [
                MessageHandler(
                    Filters.text("–í–µ—Ä–Ω—É—Ç—å—Å—è"), get_main_menu
                ),
                CallbackQueryHandler(
                    start, pattern="back_to_menu"
                )
            ]
        },
        fallbacks=[],
        allow_reentry=True,
        name='bot_conversation'
    )

    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()
